setnames(data_country, 'V1', 'country')
View(data_country)
library(stringr)
str_split('test:case', ':')[1]
str_split('test:case', ':')[[1]]
str_split('test:case', ':')[[1]][1]
str_split('testcase', ':')[[1]][1]
str_split('test case', ':')[[1]][1]
str_split_fixed('test case', ':', n=2)
str_split_fixed('test case', ':', n=2)[1]
str_split_fixed('test:case', ':', n=2)[1]
met[, country := str_split_fixed(country, ':', n = 2) [1]]
View(met)
# Add countries to the data table
met[, country := map.where(database = 'world', reclong, reclat)]
View(met)
met[, country := str_split(country, ':')[[1]]]
View(met)
# Add countries to the data table
met[, country := map.where(database = 'world', reclong, reclat)]
met[, country := str_split(country, ':')]
View(met)
# Add countries to the data table
met[, country := map.where(database = 'world', reclong, reclat)]
met[, country := str_split(country, ':')[1]]
View(met)
met[str_detect(country, ':'), country := strsplit(country, ':')[1]]
# Add countries to the data table
met[, country := map.where(database = 'world', reclong, reclat)]
met[str_detect(country, ':'), country := strsplit(country, ':')[1]]
View(met)
# Add countries to the data table
met[, country := map.where(database = 'world', reclong, reclat)]
test <- met[str_detect(country, ':')]
View(test)
test[str_detect(country, ':'), country := strsplit(country, ':')[1]]
View(test)
test <- met[str_detect(country, ':')]
# Add countries to the data table
met[, country := map.where(database = 'world', reclong, reclat)]
met[str_detect(country, ':'), country := tstrsplit(country, ':')[1]]
View(met)
test[str_detect(country, ':'), country := tstrsplit(country, ':')[1]]
View(test)
# Add countries to the data table
met[, country := map.where(database = 'world', reclong, reclat)]
met[, country := tstrsplit(country, ':')[1]]
View(met)
countries <- data.table(table(met[, country]))
setnames(countries, 'V1', 'country')
View(countries)
data.table(table(met[, c(country, fall)]))
mapWorld = map("world", fill = TRUE, plot = FALSE)
# This code colors all countries (randomly?) into 3 colors:
mapWorld = map("world", fill = TRUE, plot = FALSE)
leaflet(data = mapWorld) %>% addTiles() %>%
addPolygons(fillColor = topo.colors(3, alpha = NULL), stroke = FALSE)
leaflet(data = mapWorld) %>% addTiles() %>%
addPolygons(data = countries, fillColor = ~N, stroke = FALSE)
leaflet(data = mapWorld) %>% addTiles() %>%
addPolygons()
View(mapWorld)
bins <- c(0, 2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 3000, Inf)
pal <- colorBin('YlOrRd', domain = countries$N, bins = bins)
View(mapWorld)
library(sp)
SpatialPolygonsDataFrame(mapWorld)
library(maptools)
IDs <- sapply(strsplit(mapWorld$names, ":"), function(x) x[1])
world <- map2SpatialPolygons(mapWorld, IDs=IDs, proj4string=CRS("+proj=longlat +datum=WGS84"))
SpatialPolygonsDataFrame(Sr = world, data = countries)
merge(world, countries)
sp::merge(world, countries)
SpatialPolygonsDataFrame(world)
SpatialPolygonsDataFrame(Sr = world, data = countries, match.ID = TRUE)
View(world)
names(world)
#Creating a dataframe with Spol IDs
world_df<- as.data.frame(sapply(slot(world, "polygons"), function(x) slot(x, "ID")))
#Making the IDs row names
row.names(world_df) <- sapply(slot(world, "polygons"), function(x) slot(x, "ID"))
# Making the spatial polygon data frame
world_SPDF <- SpatialPolygonsDataFrame(world, data =world_df)
View(world_SPDF)
View(world_SPDF)
world_SP <- merge(world_SPDF, countries, by.x = 'data', by.y = 'country')
world_SP <- merge(world, countries, by.x = 'data', by.y = 'country')
View(world)
world_SP <- merge(world, countries, by.x = 'ID', by.y = 'country')
world_SP <- sp::merge(world, countries, by.x = 'ID', by.y = 'country')
names(countries)
names(world_SPDF)
colnames(world_SPDF)
names(world_SPDF) <- 'country'
names(world_SPDF)
View(world_SPDF)
newworld <- merge(world_SPDF, countries, by.x = 'country', by.y = 'country')
leaflet(newworld) %>% addTiles() %>% addPolygons(color = ~pal(N))
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7)
leaflet(newworld[country != 'Antarctica']) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7)
View(newworld)
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE))
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = FALSE))
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE))
bins <- c(0, 5, 10, 50, 100, 500, 1000, 2000, 3000, Inf)
bins <- c(0, 5, 10, 50, 100, 500, 1000, 3000, Inf)
pal <- colorBin('YlOrRd', domain = countries$N, bins = bins)
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE))
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), popup = ~N)
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = ~N)
newworld$area_sqkm <- area(newworld) / 1000000
library(raster)
newworld$area_sqkm <- area(newworld) / 1000000
View(newworld)
newworld$area_sqkm
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = ~(N/area_sqkm))
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = ~htmltools::HTML((N/area_sqkm)))
labels <- sprintf('<strong>%s</strong><br/>%g meteorites / km<sup>2</sup>', newworld$country, newworld$N/newworld$area_sqkm) %>% lapply(htmltools::HTML)
View(labels)
labels <- sprintf('<strong>%s</strong><br/>%g meteorites / 1000km<sup>2</sup>', newworld$country, 1000 * newworld$N/newworld$area_sqkm) %>% lapply(htmltools::HTML)
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels)
# Interactive plot
leaflet() %>% addTiles() %>% addMarkers(data = met,
lng = ~reclong, lat = ~reclat,
popup = ~name,
clusterOptions = markerClusterOptions())
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels)
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1.5, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels)
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels)
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels)
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal(N), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal, values = ~N, opacity = 0.7, title = NULL, position = 'bottomright')
View(countries)
test_c <- countries
met[, mean(mass), by = country]
test <- met[, mean(mass), by = country]
test <- merge(world, test, by.x = 'country', by.y = 'country')
test <- merge(newworld, test, by.x = 'country', by.y = 'country')
setnames(test, 'V1', 'mass')
test <- met[, mean(mass), by = country]
setnames(test, 'V1', 'mass')
test <- merge(newworld, test, by.x = 'country', by.y = 'country')
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(min(test$mass), max(test$mass)), bins = 9)
leaflet(newworld) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(mass), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = NULL, position = 'bottomright')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(mass), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = NULL, position = 'bottomright')
View(pal_mass)
View(pal)
min(test$mass)
max(test$mass)
min(na.omit(test$mass))
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(min(na.omit(test$mass)), max(na.omit(test$mass))), bins = 9)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(mass), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = NULL, position = 'bottomright')
previewColors(colorNumeric("Blues", domain = NULL), sort(rexp(16)))
previewColors(colorBin("Blues", domain = NULL, bins = 4), sort(rexp(16)))
previewColors(colorQuantile("Blues", domain = NULL), sort(rexp(16)))
pal_mass <- colorQuantile(palette = 'YlOrRd', domain = c(min(na.omit(test$mass)), max(na.omit(test$mass))), bins = 9)
pal_mass <- colorQuantile(palette = 'YlOrRd', domain = c(min(na.omit(test$mass)), max(na.omit(test$mass))))
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(mass), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = NULL, position = 'bottomright')
pal_mass <- colorQuantile(palette = 'YlOrRd', domain = c(min(na.omit(test$mass)), max(na.omit(test$mass))), n = 9)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(mass), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = NULL, position = 'bottomright')
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), bins = 9)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = NULL, position = 'bottomright')
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), bins = 9)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = NULL, position = 'bottomright')
labels_mass <- sprintf('<strong>%s</strong><br/>%g g on average', newworld$country, newworld$mass) %>% lapply(htmltools::HTML)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = NULL, position = 'bottomright')
View(newworld)
labels_mass <- sprintf('<strong>%s</strong><br/>%g g on average', test$country, test$mass) %>% lapply(htmltools::HTML)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = NULL, position = 'bottomright')
labels_mass <- sprintf('<strong>%s</strong><br/>Average mass of %gg', test$country, test$mass) %>% lapply(htmltools::HTML)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = NULL, position = 'bottomright')
labels_mass <- sprintf('<strong>%s</strong><br/>Average mass of %g g', test$country, test$mass) %>% lapply(htmltools::HTML)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = NULL, position = 'bottomright')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Average meteorite mass', position = 'bottomright')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~10^mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
labels_mass <- sprintf('<strong>%s</strong><br/>Average mass of %g g<br/>Averaged over %g meteorites', test$country, test$mass, test$N) %>% lapply(htmltools::HTML)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~10^mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
test[N]
test$N
test$N[is.NA(test$N)] <- 0
test$N[is.na(test$N)] <- 0
test$N
labels_mass <- sprintf('<strong>%s</strong><br/>Average mass of %g g<br/>Averaged over %g meteorites', test$country, test$mass, test$N) %>% lapply(htmltools::HTML)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~10^mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
labels_mass <- sprintf('<strong>%s</strong><br/>Average mass of %g g<br/><small>Averaged over %g meteorites</small>', test$country, test$mass, test$N) %>% lapply(htmltools::HTML)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~10^mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright', labelFormat = function(x){10^x})
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright', labFormat = function(x){10^x})
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright', labFormat = function(type, cuts, p){n = length(cuts)
paste0(10^cuts[-n], '&ndash', 10^cuts[-1])})
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = range(10, 5000), opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = range(10, 11), opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~10^mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), bins = 9, n = 9)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~10^mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), n = 9)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~10^mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), n = 9, na.color = 'grey')
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), na.color = 'grey', n = 9)
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), na.color = 'grey')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~10^mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(mass), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), na.color = 'grey', reverse = TRUE)
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), na.color = 'grey')
leaflet(test) %>% addTiles() %>% addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7, highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE), label = labels_mass, labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'), textsize = '15px', direction = 'auto')) %>% addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright')
test$mass[is.na(test$mass)] <- 0
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), na.color = 'grey')
# Possibly define custom palette to correctly display logarithmic legend
leaflet(test) %>% addTiles() %>%
addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7,
highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE),
label = labels_mass,
labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'),
textsize = '15px', direction = 'auto')) %>%
addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Log of average meteorite mass (g)', position = 'bottomright')
test <- met[, mean(mass), by = country]
setnames(test, 'V1', 'mass')
test <- merge(world, test, by.x = 'country', by.y. = 'country')
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), na.color = 'grey')
# Possibly define custom palette to correctly display logarithmic legend
leaflet(test) %>% addTiles() %>%
addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7,
highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE),
label = labels_mass,
labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'),
textsize = '15px', direction = 'auto')) %>%
addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Log of average meteorite mass (g)', position = 'bottomright')
test <- met[, mean(mass), by = country]
setnames(test, 'V1', 'mass')
test <- merge(newworld, test, by.x = 'country', by.y. = 'country')
test$N[is.na(test$N)] <- 0
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), na.color = 'grey')
# Possibly define custom palette to correctly display logarithmic legend
leaflet(test) %>% addTiles() %>%
addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7,
highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE),
label = labels_mass,
labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'),
textsize = '15px', direction = 'auto')) %>%
addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Log of average meteorite mass (g)', position = 'bottomright')
test$mass[is.na(test$mass)] <- 0
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), na.color = 'grey')
# Possibly define custom palette to correctly display logarithmic legend
leaflet(test) %>% addTiles() %>%
addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7,
highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE),
label = labels_mass,
labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'),
textsize = '15px', direction = 'auto')) %>%
addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Log of average meteorite mass (g)', position = 'bottomright')
test <- met[, mean(mass), by = country]
setnames(test, 'V1', 'mass')
test <- merge(world, test, by.x = 'country', by.y. = 'country')
test$N[is.na(test$N)] <- 0
test <- met[, mean(mass), by = country]
setnames(test, 'V1', 'mass')
test <- merge(newworld, test, by.x = 'country', by.y. = 'country')
test$N[is.na(test$N)] <- 0
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), na.color = 'grey')
# Possibly define custom palette to correctly display logarithmic legend
leaflet(test) %>% addTiles() %>%
addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7,
highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE),
label = labels_mass,
labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'),
textsize = '15px', direction = 'auto')) %>%
addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Log of average meteorite mass (g)', position = 'bottomright')
library(readr)
library(data.table)
library(leaflet)
library(leaflet.extras)
library(ggplot2)
library(maps)
library(maptools)
library(raster)
# Load and prepare the data
met <- read_csv('Meteorite_Landings.csv')
met <- na.omit(as.data.table(met))
met[, year := lubridate::dmy_hms(year)]
met[, year := lubridate::year(year)]
met[, fall := as.factor(fall)]
setnames(met, 'mass (g)', 'mass')
# Filter out bad years
met <- met[year > 860 & year <= 2016]
# Filter out weird locations
met <- met[reclong <= 180 & reclong > -180 & (reclat !=0 | reclong != 0)]
# Add countries to the data table
met[, country := map.where(database = 'world', reclong, reclat)]
met[, country := tstrsplit(country, ':')[1]]
countries <- data.table(table(met[, country]))
setnames(countries, 'V1', 'country')
# Create leaflet with meteorite density per square km and amount of meteorites per country
mapWorld = map("world", fill = TRUE, plot = FALSE)
IDs <- sapply(strsplit(mapWorld$names, ":"), function(x) x[1])
world <- map2SpatialPolygons(mapWorld, IDs=IDs, proj4string=CRS("+proj=longlat +datum=WGS84"))
world_df<- as.data.frame(sapply(slot(world, "polygons"), function(x) slot(x, "ID")))
row.names(world_df) <- sapply(slot(world, "polygons"), function(x) slot(x, "ID"))
world_SPDF <- SpatialPolygonsDataFrame(world, data =world_df)
names(world_SPDF) <- 'country'
world <- merge(world_SPDF, countries, by.x = 'country', by.y = 'country')
world$area_sqkm <- area(world) / 1000000
bins <- c(0, 5, 10, 50, 100, 500, 1000, 3000, Inf)
pal <- colorBin('YlOrRd', domain = countries$N, bins = bins)
labels <- sprintf('<strong>%s</strong><br/>%g meteorites / km<sup>2</sup>', world$country, world$N/world$area_sqkm) %>%
lapply(htmltools::HTML)
leaflet(world) %>% addTiles() %>%
addPolygons(fillColor = ~pal(N), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7,
highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'),
textsize = '15px', direction = 'auto')) %>%
addLegend(pal = pal, values = ~N, opacity = 0.7, title = NULL, position = 'bottomright')
labels <- sprintf('<strong>%s</strong><br/>%g meteorites / 1000km<sup>2</sup>', world$country, 1000*world$N/world$area_sqkm) %>%
lapply(htmltools::HTML)
leaflet(world) %>% addTiles() %>%
addPolygons(fillColor = ~pal(N), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7,
highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'),
textsize = '15px', direction = 'auto')) %>%
addLegend(pal = pal, values = ~N, opacity = 0.7, title = NULL, position = 'bottomright')
# Plot a log-normal histogram of the weight distribution
met_hist <- met[met[, mass] != 0]
ggplot(met_hist, aes(x = mass)) +
geom_histogram(data = subset(met, fall == 'Found'), aes(fill = fall), alpha = 0.2) +
geom_histogram(data = subset(met, fall == 'Fell'), aes(fill = fall), alpha = 0.2) +
scale_fill_manual(name = 'Discovery', values = c('blue', 'red')) +
scale_x_log10() +
xlab('Mass (g)') +
ylab('Count')
library(readr)
library(data.table)
library(leaflet)
library(leaflet.extras)
library(ggplot2)
library(maps)
library(maptools)
library(raster)
library(gganimate)
library(ggthemes)
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist,
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = year),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)')
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = year),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)')
gganimate(map, interval = .2)
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = year),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)')
gganimate(map, interval = .2)
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = 'red'),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)')
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = log(mass)),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)')
map
View(met_hist)
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = recclass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)')
map
gganimate(map, interval = .25)
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = year),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + theme(legend.position = c(1.1, 0))
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = year),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + theme(plot.margin = unit(c(1, 2, 1, 1))) + theme(legend.position = c(1.1, 0))
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_fill_manual(values = 'YlOrRd')
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient()
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient(mid = 10^5)
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient2(mid = 10^5)
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient2(mid = 10^3)
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient2(midpoint = 10^3)
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_fill_gradient(trans = 'log')
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_fill_gradient(trans = 'log10')
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient(trans = 'log10')
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient(trans = 'log10', low = 'darkred', high = 'rede')
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient(trans = 'log10', low = 'darkred', high = 'lightred')
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient(trans = 'log10', low = 'darkred', high = 'red')
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient(trans = 'log10', low = 'brown', high = 'red')
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient(trans = 'log10', low = 'darkbrown', high = 'red')
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient(trans = 'log10', pal = 'reds')
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient2(trans = 'log10')
map
map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
geom_point(data = met_hist[fall == 'Fell' & year>1900],
aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = mass),
alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) +
labs(size = 'Mass (g)') + scale_colour_gradient(trans = 'log10')
map
gganimate(map, titlename = 'evolution.gif', saver = 'gif')
ggplot(data = mets, aes(x = material)) + geom_point(aes(y = mass))
ggplot(data = met, aes(x = material)) + geom_point(aes(y = mass))
ggplot(data = met, aes(x = recclass)) + geom_point(aes(y = mass))
install.packages('kable')
str(met)
?read_csv
?str
knitr::opts_chunk$set(echo = TRUE)
met <- read_csv('Meteorite_Landings.csv')
met <- na.omit(as.data.table(met))
met <- na.omit(as.data.table(met))
met <- na.omit(as.data.table(met))
max(met[, year])
met[, year := lubridate::dmy_hms(year)]
met[, year := lubridate::year(year)]
met[, fall := as.factor(fall)]
setnames(met, 'mass (g)', 'mass')
max(met[, year])
min(met[, year])
View(met)
