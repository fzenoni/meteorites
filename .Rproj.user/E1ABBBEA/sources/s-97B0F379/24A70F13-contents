library(readr)
library(data.table)
library(leaflet)
library(leaflet.extras)
library(ggplot2)
library(maps)
library(maptools)
library(raster)
library(gganimate)
library(ggthemes)

# Load and prepare the data
met <- read_csv('Meteorite_Landings.csv')
met <- na.omit(as.data.table(met))
met[, year := lubridate::dmy_hms(year)]
met[, year := lubridate::year(year)]
met[, fall := as.factor(fall)]
setnames(met, 'mass (g)', 'mass')

View(met)

# Filter out bad years
met <- met[year > 860 & year <= 2016]

# Filter out weird locations
met <- met[reclong <= 180 & reclong > -180 & (reclat !=0 | reclong != 0)]

# Preliminary plot
plot(met$reclong, met$reclat, col = met$fall)
legend(145,30,unique(met$fall),col=1:length(met$fall),pch=1)

# Interactive plot
leaflet() %>% addTiles() %>% addMarkers(data = met,
                                        lng = ~reclong, lat = ~reclat,
                                        popup = ~name,
                                        clusterOptions = markerClusterOptions())

# Heatmap on (mostly) population density-related background
leaflet() %>% addProviderTiles(providers$NASAGIBS.ViirsEarthAtNight2012) %>%
    addHeatmap(data = met[fall == 'Fell'], lng = ~reclong, lat = ~reclat, blur = 25, radius = 10)

# Plot a log-normal histogram of the weight distribution
met_hist <- met[met[, mass] != 0] 
ggplot(met_hist, aes(x = mass)) +
    geom_histogram(data = subset(met_hist, fall == 'Found'), aes(fill = fall), alpha = 0.2) +
    geom_histogram(data = subset(met_hist, fall == 'Fell'), aes(fill = fall), alpha = 0.2) +
    scale_fill_manual(name = 'Discovery', values = c('blue', 'red')) +
    scale_x_log10() +
    xlab('Mass (g)') +
    ylab('Count')

# Add countries to the data table
met[, country := map.where(database = 'world', reclong, reclat)]
met[, country := tstrsplit(country, ':')[1]]

countries <- data.table(table(met[, country]))
setnames(countries, 'V1', 'country')

# Create leaflet with meteorite density per square km and amount of meteorites per country
mapWorld = map("world", fill = TRUE, plot = FALSE)
IDs <- sapply(strsplit(mapWorld$names, ":"), function(x) x[1])
world <- map2SpatialPolygons(mapWorld, IDs=IDs, proj4string=CRS("+proj=longlat +datum=WGS84"))
world_df<- as.data.frame(sapply(slot(world, "polygons"), function(x) slot(x, "ID")))
row.names(world_df) <- sapply(slot(world, "polygons"), function(x) slot(x, "ID"))
world_SPDF <- SpatialPolygonsDataFrame(world, data =world_df)
names(world_SPDF) <- 'country'
world <- merge(world_SPDF, countries, by.x = 'country', by.y = 'country')
world$area_sqkm <- area(world) / 1000000
bins <- c(0, 5, 10, 50, 100, 500, 1000, 3000, Inf)
pal <- colorBin('YlOrRd', domain = countries$N, bins = bins)
labels <- sprintf('<strong>%s</strong><br/>%g meteorites / 1000km<sup>2</sup>', world$country, 1000*world$N/world$area_sqkm) %>%
    lapply(htmltools::HTML)
leaflet(world) %>% addTiles() %>%
    addPolygons(fillColor = ~pal(N), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7,
                highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE),
                label = labels,
                labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'),
                                            textsize = '15px', direction = 'auto')) %>%
    addLegend(pal = pal, values = ~N, opacity = 0.7, title = NULL, position = 'bottomright')

# Display average mass for each country
test <- met[, mean(mass), by = country]
setnames(test, 'V1', 'mass')
test <- merge(world, test, by.x = 'country', by.y. = 'country')
test$N[is.na(test$N)] <- 0
pal_mass <- colorBin(palette = 'YlOrRd', domain = c(log(min(na.omit(test$mass))), log(max(na.omit(test$mass)))), na.color = 'grey')
leaflet(test) %>% addTiles() %>%
    addPolygons(fillColor = ~pal_mass(log(mass)), weight = 1.2, opacity = 1, color = 'white', fillOpacity = 0.7,
                highlight = highlightOptions(weight = 2, color = '#666', fillOpacity = 0.7, bringToFront = TRUE),
                label = labels_mass,
                labelOptions = labelOptions(style = list('font-weight' = 'normal', padding = '3px 8px'),
                                                                 textsize = '15px', direction = 'auto')) %>%
    addLegend(pal = pal_mass, values = ~mass, opacity = 0.7, title = 'Average meteorite mass (g)', position = 'bottomright',
              labFormat = labelFormat(transform = function(x) 10 ^ x, digits = 3))
# Possible to use scientific notation if custom labelFormat() function is defined

# Plot cumulative amount of meteorites per year, maybe versus world population?
foundyear <- data.table(table(met[fall == 'Found', year]))
fellyear <- data.table(table(met[fall == 'Fell', year]))
fellyear[, c('tot', 'fall') := list(cumsum(N), 'Fell')]
foundyear[, c('tot', 'fall') := list(cumsum(N), 'Found')]
year_data <- rbind(fellyear, foundyear)
setnames(year_data, 'V1', 'year')
year_data[, year := as.numeric(year)]

ggplot(data = year_data, aes(x = year)) +
    geom_line(data = subset(year_data, fall == 'Found'), aes(y = tot, color = fall)) +
    geom_line(data = subset(year_data, fall == 'Fell'), aes(y = 30 * tot, color = fall)) +
    scale_y_continuous('Total # meteorites found', sec.axis = sec_axis(~./30, name = 'Total # meteorites seen falling')) +
    scale_x_continuous(name = 'Year')

# Meteorite masses in function of years
ggplot(data = met[fall == 'Fell'], aes(x = year)) + geom_point(aes(y = mass)) + scale_y_continuous(trans = 'log10')

# Animated map

map <- ggplot() + borders('world', colour = 'gray85', fill = 'gray80') + theme_map() +
    geom_point(data = met_hist,
               aes(x = reclong, y = reclat, size = mass, frame = year, cumulative = TRUE, color = year),
               alpha = 0.8) + scale_radius(trans = 'log10', range = c(0.1, 10), breaks = c(1e+00, 1e+02, 1e+04, 1e+06)) + 
    labs(size = 'Mass (g)')
